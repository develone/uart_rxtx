// File: uart_txrx.v
// Generated by MyHDL 1.0dev
// Date: Mon Apr 23 14:00:59 2018


`timescale 1ns/10ps

module uart_txrx (

);



reg o_TX_Active;
reg o_TX_Done;
wire i_TX_DV;
wire i_RX_Serial;
wire [7:0] i_TX_Byte;
reg o_RX_DV;
reg [7:0] o_RX_Byte;
wire i_Clock;
reg o_TX_Serial;
reg [7:0] uart_tx0_0_r_Clock_Count;
reg [2:0] uart_tx0_0_r_Bit_Index;
reg [7:0] uart_tx0_0_r_TX_data;
reg uart_tx0_0_r_TX_Active;
reg [2:0] uart_tx0_0_r_SM_Main;
reg uart_tx0_0_r_TX_Done;
reg uart_rx0_0_r_RX_DV;
reg [2:0] uart_rx0_0_r_SM_Main;
reg [7:0] uart_rx0_0_r_Clock_Count;
reg [2:0] uart_rx0_0_r_Bit_Index;
reg [7:0] uart_rx0_0_r_RX_Byte;

assign i_TX_DV = 1'd0;
assign i_RX_Serial = 1'd0;
assign i_TX_Byte = 8'd0;
assign i_Clock = 1'd0;


always @(posedge i_Clock) begin: UART_TXRX_UART_TX0_0_SEND
    case (uart_tx0_0_r_SM_Main)
        'h0: begin
            // Drive Line High for IDLE
            o_TX_Serial <= 1;
            uart_tx0_0_r_TX_Done <= 0;
            uart_tx0_0_r_Bit_Index <= 0;
            uart_tx0_0_r_Clock_Count <= 0;
            if ((i_TX_DV == 1)) begin
                uart_tx0_0_r_TX_Active <= 1;
                uart_tx0_0_r_TX_data <= i_TX_Byte;
                uart_tx0_0_r_SM_Main <= 1;
            end
            else begin
                uart_tx0_0_r_SM_Main <= 0;
                // End of IDLE
            end
        end
        'h1: begin
            o_TX_Serial <= 0;
            if (($signed({1'b0, uart_tx0_0_r_Clock_Count}) < (217 - 1))) begin
                uart_tx0_0_r_Clock_Count <= (uart_tx0_0_r_Clock_Count + 1);
                uart_tx0_0_r_SM_Main <= 1;
            end
            else begin
                uart_tx0_0_r_Clock_Count <= 0;
                uart_tx0_0_r_SM_Main <= 2;
            end
        end
        'h2: begin
            o_TX_Serial <= uart_tx0_0_r_TX_data[uart_tx0_0_r_Bit_Index];
            if (($signed({1'b0, uart_tx0_0_r_Clock_Count}) < (217 - 1))) begin
                uart_tx0_0_r_Clock_Count <= (uart_tx0_0_r_Clock_Count + 1);
                uart_tx0_0_r_SM_Main <= 2;
            end
            else begin
                uart_tx0_0_r_Clock_Count <= 0;
                if ((uart_tx0_0_r_Bit_Index < 7)) begin
                    uart_tx0_0_r_Bit_Index <= (uart_tx0_0_r_Bit_Index + 1);
                    uart_tx0_0_r_SM_Main <= 2;
                end
                else begin
                    uart_tx0_0_r_Bit_Index <= 0;
                    uart_tx0_0_r_SM_Main <= 3;
                end
            end
        end
        'h3: begin
            o_TX_Serial <= 1;
            if (($signed({1'b0, uart_tx0_0_r_Clock_Count}) < (217 - 1))) begin
                uart_tx0_0_r_Clock_Count <= (uart_tx0_0_r_Clock_Count + 1);
                uart_tx0_0_r_SM_Main <= 3;
            end
            else begin
                uart_tx0_0_r_TX_Done <= 1;
                uart_tx0_0_r_Clock_Count <= 0;
                uart_tx0_0_r_SM_Main <= 4;
                uart_tx0_0_r_TX_Active <= 0;
            end
        end
        'h4: begin
            uart_tx0_0_r_TX_Done <= 1;
            uart_tx0_0_r_SM_Main <= 0;
        end
        default: begin
            uart_tx0_0_r_SM_Main <= 0;
        end
    endcase
    o_TX_Active <= uart_tx0_0_r_TX_Active;
    o_TX_Done <= uart_tx0_0_r_TX_Done;
end


always @(posedge i_Clock) begin: UART_TXRX_UART_RX0_0_RECV
    case (uart_rx0_0_r_SM_Main)
        'h0: begin
            // Drive Line High for IDLE
            uart_rx0_0_r_RX_DV <= 0;
            uart_rx0_0_r_Bit_Index <= 0;
            uart_rx0_0_r_Clock_Count <= 0;
            if ((i_RX_Serial == 0)) begin
                uart_rx0_0_r_SM_Main <= 1;
            end
            else begin
                uart_rx0_0_r_SM_Main <= 0;
            end
        end
        'h1: begin
            if (($signed({1'b0, uart_rx0_0_r_Clock_Count}) == ((217 - 1) / 2))) begin
                if ((i_RX_Serial == 0)) begin
                    uart_rx0_0_r_Clock_Count <= 0;
                    uart_rx0_0_r_SM_Main <= 2;
                end
                else begin
                    uart_rx0_0_r_SM_Main <= 0;
                end
            end
            else begin
                uart_rx0_0_r_Clock_Count <= (uart_rx0_0_r_Clock_Count + 1);
                uart_rx0_0_r_SM_Main <= 1;
            end
        end
        'h2: begin
            if (($signed({1'b0, uart_rx0_0_r_Clock_Count}) < (217 - 1))) begin
                uart_rx0_0_r_Clock_Count <= (uart_rx0_0_r_Clock_Count + 1);
                uart_rx0_0_r_SM_Main <= 2;
            end
            else begin
                uart_rx0_0_r_Clock_Count <= 0;
                uart_rx0_0_r_RX_Byte[uart_rx0_0_r_Bit_Index] <= i_RX_Serial;
                if ((uart_rx0_0_r_Bit_Index < 7)) begin
                    uart_rx0_0_r_Bit_Index <= (uart_rx0_0_r_Bit_Index + 1);
                    uart_rx0_0_r_SM_Main <= 2;
                end
                else begin
                    uart_rx0_0_r_Bit_Index <= 0;
                    uart_rx0_0_r_SM_Main <= 3;
                end
            end
        end
        'h3: begin
            if (($signed({1'b0, uart_rx0_0_r_Clock_Count}) < (217 - 1))) begin
                uart_rx0_0_r_Clock_Count <= (uart_rx0_0_r_Clock_Count + 1);
                uart_rx0_0_r_SM_Main <= 3;
            end
            else begin
                uart_rx0_0_r_RX_DV <= 1;
                uart_rx0_0_r_Clock_Count <= 0;
                uart_rx0_0_r_SM_Main <= 4;
            end
        end
        'h4: begin
            uart_rx0_0_r_SM_Main <= 0;
            uart_rx0_0_r_RX_DV <= 0;
        end
        default: begin
            uart_rx0_0_r_SM_Main <= 0;
        end
    endcase
    o_RX_DV <= uart_rx0_0_r_RX_DV;
    o_RX_Byte <= uart_rx0_0_r_RX_Byte;
end

endmodule
