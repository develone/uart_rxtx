// File: uart_tx.v
// Generated by MyHDL 1.0dev
// Date: Wed Apr 25 14:36:31 2018


`timescale 1ns/10ps

module uart_tx (
    i_Clock,
    i_TX_DV,
    i_TX_Byte,
    o_TX_Active,
    o_uart_tx,
    o_TX_Done
);


input i_Clock;
input i_TX_DV;
input [7:0] i_TX_Byte;
output o_TX_Active;
reg o_TX_Active;
output o_uart_tx;
reg o_uart_tx;
output o_TX_Done;
reg o_TX_Done;

reg [7:0] r_Clock_Count;
reg [2:0] r_Bit_Index;
reg [7:0] r_TX_data;
reg r_TX_Active;
reg [2:0] r_SM_Main;
reg r_TX_Done;



always @(posedge i_Clock) begin: UART_TX_SEND
    case (r_SM_Main)
        'h0: begin
            // Drive Line High for IDLE
            o_uart_tx <= 1;
            r_TX_Done <= 0;
            r_Bit_Index <= 0;
            r_Clock_Count <= 0;
            if ((i_TX_DV == 1)) begin
                r_TX_Active <= 1;
                r_TX_data <= i_TX_Byte;
                r_SM_Main <= 1;
            end
            else begin
                r_SM_Main <= 0;
                // End of IDLE
            end
        end
        'h1: begin
            o_uart_tx <= 0;
            if (($signed({1'b0, r_Clock_Count}) < (217 - 1))) begin
                r_Clock_Count <= (r_Clock_Count + 1);
                r_SM_Main <= 1;
            end
            else begin
                r_Clock_Count <= 0;
                r_SM_Main <= 2;
            end
        end
        'h2: begin
            o_uart_tx <= r_TX_data[r_Bit_Index];
            if (($signed({1'b0, r_Clock_Count}) < (217 - 1))) begin
                r_Clock_Count <= (r_Clock_Count + 1);
                r_SM_Main <= 2;
            end
            else begin
                r_Clock_Count <= 0;
                if ((r_Bit_Index < 7)) begin
                    r_Bit_Index <= (r_Bit_Index + 1);
                    r_SM_Main <= 2;
                end
                else begin
                    r_Bit_Index <= 0;
                    r_SM_Main <= 3;
                end
            end
        end
        'h3: begin
            o_uart_tx <= 1;
            if (($signed({1'b0, r_Clock_Count}) < (217 - 1))) begin
                r_Clock_Count <= (r_Clock_Count + 1);
                r_SM_Main <= 3;
            end
            else begin
                r_TX_Done <= 1;
                r_Clock_Count <= 0;
                r_SM_Main <= 4;
                r_TX_Active <= 0;
            end
        end
        'h4: begin
            r_TX_Done <= 1;
            r_SM_Main <= 0;
        end
        default: begin
            r_SM_Main <= 0;
        end
    endcase
    o_TX_Active <= r_TX_Active;
    o_TX_Done <= r_TX_Done;
end

endmodule
